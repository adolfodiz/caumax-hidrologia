import streamlit as st
import os
import json
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import folium
from streamlit_folium import st_folium
import io
import zipfile
import tempfile
from shapely.ops import unary_union
from pathlib import Path
import rasterio

# Cargar variables de entorno
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

def main():
    """Aplicaci√≥n principal unificada: Landing + App completa"""
    
    # NO configurar p√°gina aqu√≠ - lo har√° app.py cuando sea necesario
    
    # Si va a mostrar suscripci√≥n ‚Üí mostrar UI de Stripe integrada
    if st.session_state.get("show_subscription", False):
        show_subscription_flow()
        return
    
    # Si ya est√° autenticado ‚Üí mostrar aplicaci√≥n principal
    if st.session_state.get("authenticated", False):
        show_main_app()
        return
    
    # Por defecto ‚Üí mostrar landing page
    show_landing_page()

def show_landing_page():
    """Landing page limpia"""
    
    # Header principal
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1>üíß CAUMAX - An√°lisis Hidrol√≥gico Profesional</h1>
        <h3>Plataforma integral para delineaci√≥n de cuencas y an√°lisis DEM de Espa√±a</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Layout en dos columnas
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üîß Caracter√≠sticas incluidas:")
        st.markdown("""
        ‚úÖ **Delineaci√≥n autom√°tica de cuencas hidrogr√°ficas**  
        ‚úÖ **An√°lisis con DEM de 25m de resoluci√≥n de toda Espa√±a**  
        ‚úÖ **C√°lculo de par√°metros hidrol√≥gicos (M√©todo Racional, GEV, TCEV)**  
        ‚úÖ **Visualizaci√≥n GIS interactiva con mapas de OpenStreetMap**  
        ‚úÖ **Generaci√≥n de perfiles longitudinales del terreno**  
        ‚úÖ **Exportaci√≥n de resultados en m√∫ltiples formatos**  
        ‚úÖ **Acceso a capas GIS profesionales de Espa√±a**  
        """)
        
        st.markdown("### üéØ Ideal para:")
        st.markdown("""
        ‚Ä¢ **Ingenieros civiles e hidr√°ulicos**
        ‚Ä¢ **Consultoras ambientales**  
        ‚Ä¢ **Estudios de impacto hidrol√≥gico**
        ‚Ä¢ **Proyectos de infraestructura**
        ‚Ä¢ **Investigaci√≥n acad√©mica**
        """)
    
    with col2:
        st.markdown("### üí∞ Suscripci√≥n Profesional")
        st.markdown("**‚Ç¨50 por a√±o** (‚Ç¨4.17/mes)")
        st.markdown("---")
        
        # Bot√≥n rojo para suscribirse 
        if st.button("üî¥ **SUSCRIBIRSE**", type="primary", use_container_width=True, key="subscribe_button"):
            st.session_state.show_subscription = True
            st.rerun()
        
        st.markdown("---")
        st.markdown("### Si ya eres USUARIO:")
        
        # Formulario de acceso para usuarios existentes
        with st.form("access_form", clear_on_submit=False):
            user_email = st.text_input(
                "üìß Tu email de suscripci√≥n:",
                placeholder="tu@email.com",
                help="Introduce el email con el que te suscribiste"
            )
            
            access_submitted = st.form_submit_button(
                "üü¢ **ACCEDER A LA APLICACI√ìN**", 
                use_container_width=True
            )
            
            if access_submitted and user_email:
                # Verificar suscripci√≥n del usuario
                from subscription_manager import SubscriptionManager
                from test_users import is_test_mode, create_test_mode_manager
                
                # Usar manager apropiado
                if is_test_mode():
                    subscription_manager = create_test_mode_manager()
                else:
                    subscription_manager = SubscriptionManager()
                
                # Verificar estado de suscripci√≥n
                status = subscription_manager.check_subscription_status(user_email)
                
                if status.get("status") == "active":
                    # Usuario v√°lido ‚Üí ACTIVAR APLICACI√ìN
                    st.session_state.user_email = user_email
                    st.session_state.subscription_status = status
                    st.session_state.authenticated = True
                    st.success(f"‚úÖ Bienvenido de vuelta, {user_email}!")
                    st.rerun()
                else:
                    # Usuario sin suscripci√≥n activa
                    st.error("‚ùå No encontramos una suscripci√≥n activa para este email")
                    st.info("üí° Si ya pagaste, puede tomar unos minutos en activarse")
            
            elif access_submitted and not user_email:
                st.warning("‚ö†Ô∏è Por favor introduce tu email")

def show_subscription_flow():
    """Flujo de suscripci√≥n integrado"""
    from subscription_manager import show_subscription_ui
    from test_users import enable_test_mode, is_test_mode, show_test_users_selector, show_stripe_test_cards
    
    st.title("üíß CAUMAX - Proceso de Suscripci√≥n")
    
    # Activar modo prueba en sidebar
    if st.sidebar.button("üß™ Activar Modo Prueba"):
        enable_test_mode()
        st.rerun()
    
    # Mostrar selector de usuarios de prueba
    if is_test_mode():
        selected_user = show_test_users_selector()
        show_stripe_test_cards()
        if selected_user:
            st.session_state.user_email = selected_user
    
    # Bot√≥n volver al landing
    if st.button("‚Üê Volver al inicio"):
        st.session_state.show_subscription = False
        st.rerun()
    
    # Mostrar UI de suscripci√≥n integrada
    if show_subscription_ui():
        st.session_state.show_subscription = False
        st.session_state.authenticated = True
        st.rerun()

def show_main_app():
    """Ejecutar TU app.py original directamente"""
    
    # Importar y ejecutar tu aplicaci√≥n original
    import app
    
    # Llamar a main() de tu aplicaci√≥n
    if hasattr(app, 'main'):
        app.main()
    else:
        # Si no tiene main(), ejecutar todo el m√≥dulo
        pass

if __name__ == "__main__":
    main()